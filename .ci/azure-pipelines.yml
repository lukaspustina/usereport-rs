name: $(Build.sourceBranchName)-$(Date:yyyyMMdd)$(Rev:.r)

# Set global variables
variables:
  crate_name: 'usereport-rs'
  crate_bin_name: 'usereport'
  rust_minimum_version: 1.36.0
  # cf. https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops
  macos_image_name: 'macOS-latest'
  linux_image_name: 'ubuntu-18.04'

trigger:
  branches:
    include: ['*']
  tags:
    include: ['*']

schedules:
  - cron: "0 0 * * *"
    displayName: Daily midnight build
    branches:
      include:
      - master

stages:
  - stage: Check_Build_Test
    displayName: "Check, Build, and Test"
    jobs:
      - job: Fmt
        strategy:
          matrix:
            linux-nightly:
              imageName: ${{ variables.linux_image_name }}
              rustup_toolchain: nightly
        pool:
          vmImage: $(imageName)
        steps:
          - template: templates/install_rust.yml
            parameters:
              rustup_toolchain: $(rustup_toolchain)
          - template: templates/version_information.yml
          - script: cargo fmt -- --check
            displayName: Run Fmt

      - job: Audit
        strategy:
          matrix:
            linux-stable:
              imageName: ${{ variables.linux_image_name }}
              rustup_toolchain: stable
        pool:
          vmImage: $(imageName)
        steps:
          - template: templates/install_rust.yml
            parameters:
              rustup_toolchain: $(rustup_toolchain)
          - template: templates/install_dependencies.yml
          - script: cargo install cargo-audit
            displayName: Install Cargo Audit
          - template: templates/version_information.yml
          - script: cargo audit
            displayName: Run Cargo Audit

      - job: Clippy
        strategy:
          matrix:
            mac-stable:
              imageName: ${{ variables.macos_image_name }}
              rustup_toolchain: stable
            linux-stable:
              imageName: ${{ variables.linux_image_name }}
              rustup_toolchain: stable
        pool:
          vmImage: $(imageName)
        steps:
          - template: templates/install_rust.yml
            parameters:
              rustup_toolchain: $(rustup_toolchain)
          - template: templates/install_dependencies.yml
          - template: templates/version_information.yml
          - script: cargo clippy --all --all-features -- -D warnings $(source ".clippy.args")
            displayName: Run Clippy

      - job: 'Build_n_Test'
        displayName: "Build and Test"
        strategy:
          matrix:
            mac-minimum-${{ variables.rust_minimum_version }}:
              imageName: ${{ variables.macos_image_name }}
              rustup_toolchain: ${{ variables.rust_minimum_version }}
            mac-stable:
               imageName: ${{ variables.macos_image_name }}
               rustup_toolchain: stable
            linux-minimum-${{ variables.rust_minimum_version }}:
              imageName: ${{ variables.linux_image_name }}
              rustup_toolchain: ${{ variables.rust_minimum_version }}
            linux-stable:
              imageName: ${{ variables.linux_image_name }}
              rustup_toolchain: stable
            linux-beta:
              imageName: ${{ variables.linux_image_name }}
              rustup_toolchain: beta
        pool:
          vmImage: $(imageName)
        steps:
          - template: templates/install_rust.yml
            parameters:
              rustup_toolchain: $(rustup_toolchain)
          - template: templates/install_dependencies.yml
          - template: templates/version_information.yml
          - script: cargo build --all --all-features --tests --examples --benches
            displayName: Cargo build
          - script: cargo test --all --all-features --examples
            displayName: Cargo test

  - stage: Build_Release
    dependsOn: Check_Build_Test
    displayName: "Build Release"
    jobs:
      - job: 'Build_Static_Binary'
        displayName: "Build Static Binary"
        pool:
          vmImage: ${{ variables.linux_image_name }}
        container:
          image: lukaspustina/rust_musl:stable
          # Required, because Azure is going to add a user which requires root privileges
          options: --user 0:0
        steps:
          # The Docker Image already includes a rustup installation but for user 'rust'. Since Azure uses its own user (cf. above), we install it again.
          - template: templates/install_rust.yml
            parameters:
              rustup_toolchain: stable
          - template: templates/version_information.yml
          - script: |
              cd $BUILD_SOURCESDIRECTORY && \
              cargo build --all --all-features --release && \
              ls -al target/release/${CRATE_BIN_NAME} && \
              echo "##vso[task.setvariable variable=release_binary]target/release/${CRATE_BIN_NAME}"
            displayName: Build MUSL Static Binary
          - publish: $(Build.SourcesDirectory)/$(release_binary)
            artifact: Release_Binary
            displayName: Store Release Binary

  - stage: Publish_Release
    displayName: "Publish Release"
    dependsOn: Build_Release
    jobs:
      - job: 'Publish_To_GitHub'
        displayName: "Publish to GitHub"
        steps:
          # Shortcut 'download' cannot be used as it does not restore into the original path; cf. https://docs.microsoft.com/en-us/azure/devops/pipelines/artifacts/pipeline-artifacts?view=azure-devops&tabs=yaml#downloading-artifacts
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'Release_Binary'
              targetPath: '$(Build.ArtifactStagingDirectory)' 
            displayName: "Download Release Binary"
          - script: |
              ls -al $BUILD_ARTIFACTSTAGINGDIRECTORY && \
              mv "$BUILD_ARTIFACTSTAGINGDIRECTORY/${CRATE_BIN_NAME}" "$BUILD_ARTIFACTSTAGINGDIRECTORY/${CRATE_BIN_NAME}-$AGENT_OSARCHITECTURE-musl-static" && \
              ls -al $BUILD_ARTIFACTSTAGINGDIRECTORY
            displayName: "Prepare Assets for Upload"
          - task: GitHubRelease@0
            env:
              SYSTEM_DEBUG: true
            displayName: "Create GitHub Release"
            inputs:
              gitHubConnection: 'lukaspustina-releaseupload'
              repositoryName: '$(Build.Repository.Name)' 
              action: create
              #              target: '$(Build.SourceVersion)'
              #              tagSource: 'auto'
              #              tagPattern: 'v*'
              #              tag: $(tagName)
              assets: $(Build.ArtifactStagingDirectory)/*
              #              assetUploadMode: 'delete'
              #              isDraft: false
              #              isPreRelease: true
              #              addChangeLog: true
              #              compareWith: 'lastFullRelease'
