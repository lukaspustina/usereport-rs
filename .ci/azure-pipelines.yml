name: $(Build.sourceBranchName)-$(Date:yyyyMMdd)$(Rev:.r)

trigger:
  branches:
    include: ['*']
  tags:
    include: ['*']

schedules:
  - cron: "0 0 * * *"
    displayName: Daily midnight build
    branches:
      include:
      - master

stages:
  #  - stage: Build
  #    jobs:
  #      - job: 'Clippy'
  #        strategy:
  #          matrix:
  #            mac-stable:
  #              imageName: 'macos-10.13'
  #              rustup_toolchain: stable
  #            linux-stable:
  #              imageName: 'ubuntu-16.04'
  #              rustup_toolchain: stable
  #        pool:
  #          vmImage: $(imageName)
  #        steps:
  #          - script: |
  #              curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
  #              echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
  #            displayName: Install rust
  #          - script: rustup component add clippy
  #            displayName: Install clippy
  #          - script: cargo clippy --all --all-targets --all-features -- -D warnings $(source ".clippy.args")
  #            displayName: Run Clippy
  #
  #      - job: 'Rustfmt'
  #        pool:
  #          vmImage: 'ubuntu-16.04'
  #        container: 'rustlang/rust:nightly'
  #        steps:
  #          - script: rustup component add rustfmt
  #            displayName: Install Rustfmt
  #          - script: cargo fmt --all -- --check
  #            displayName: Run fmt
  #
  #      - job: 'Audit'
  #        pool:
  #          vmImage: 'ubuntu-16.04'
  #        container: 'rust:latest'
  #        steps:
  #          - script: cargo install cargo-audit
  #            displayName: Install Cargo Audit
  #          - script: cargo audit
  #            displayName: Run Cargo Audit
  #
  #      - job: 'Test'
  #        strategy:
  #          matrix:
  #            mac-minimum:
  #              imageName: 'macos-10.13'
  #              rustup_toolchain: 1.36.0
  #            mac-stable:
  #              imageName: 'macos-10.13'
  #              rustup_toolchain: stable
  #            linux-minimum:
  #              imageName: 'ubuntu-16.04'
  #              rustup_toolchain: 1.36.0
  #            linux-stable:
  #              imageName: 'ubuntu-16.04'
  #              rustup_toolchain: stable
  #            linux-beta:
  #              imageName: 'ubuntu-16.04'
  #              rustup_toolchain: beta
  #        pool:
  #          vmImage: $(imageName)
  #        steps:
  #          - script: |
  #              curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
  #              echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
  #            displayName: Install rust
  #          - script: cargo check --all --tests --examples --benches
  #            displayName: Cargo check
  #          - script: cargo build --all --tests --examples --benches
  #            displayName: Cargo build
  #          - script: cargo test --all
  #            displayName: Cargo test

  - stage: Release
      jobs:
      - job: 'Build_Static_Binary'
        displayName: "Build Static Binary"
        pool:
          # Other pools are currently (2019-10-14) not supported
          vmImage: 'ubuntu-16.04'
        container:
          image: lukaspustina/rust_musl:stable
          # Required, because Azure is going to add a user which requires root privileges
          options: --user 0:0
        steps:
          # The Docker Image already includes a rustup installation but for user 'rust'. Since Azure uses its own user (cf. above), we install it again.
          - template: templates/install_rust.yml
          - template: templates/version_information.yml
            # - script: |
            #   cd $BUILD_SOURCESDIRECTORY && \
            #   cargo build --package github-watchtower --release && \
            #   ls -al target/release/github-watchtower && \
            #   echo "##vso[task.setvariable variable=release_binary]target/release/github-watchtower"
          - script: |
              cd $BUILD_SOURCESDIRECTORY && \
              mkdir -p target/release && \
              ls -al > target/release/github-watchtower && \
              ls -al target/release/github-watchtower && \
              echo "##vso[task.setvariable variable=release_binary]target/release/github-watchtower"
            displayName: MUSL Cargo Build
          - publish: $(Build.SourcesDirectory)/$(release_binary)
            artifact: Release_Binary
            displayName: Storing Release Binary
      - job: 'Publish_To_GitHub'
        displayName: "Publish to GitHub"
        steps:
          # Shortcut 'download' cannot be used as it does not restore into the original path; cf. https://docs.microsoft.com/en-us/azure/devops/pipelines/artifacts/pipeline-artifacts?view=azure-devops&tabs=yaml#downloading-artifacts
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'Release_Binary'
              targetPath: '$(Build.ArtifactStagingDirectory)' 
          - script: |
              ls -al $BUILD_ARTIFACTSTAGINGDIRECTORY && \
              mv "$BUILD_ARTIFACTSTAGINGDIRECTORY/github-watchtower" "$BUILD_ARTIFACTSTAGINGDIRECTORY/github-watchtower-$AGENT_OSARCHITECTURE-musl-static" && \
              ls -al $BUILD_ARTIFACTSTAGINGDIRECTORY
            displayName: "Preparing assets for upload"
          - task: GitHubRelease@0
            env:
              SYSTEM_DEBUG: true
            displayName: "Creating GitHub Release"
            inputs:
              gitHubConnection: 'lukaspustina-releaseupload'
              # repositoryName: '$(Build.Repository.Name)' 
              repositoryName: lukaspustina/usereport-rs
              action: create
              #              target: '$(Build.SourceVersion)'
              #              tagSource: 'auto'
              #              tagPattern: 'v*'
              #              tag: $(tagName)
              assets: $(Build.ArtifactStagingDirectory)/*
              #              assetUploadMode: 'delete'
              #              isDraft: false
              #              isPreRelease: true
              #              addChangeLog: true
              #              compareWith: 'lastFullRelease'
